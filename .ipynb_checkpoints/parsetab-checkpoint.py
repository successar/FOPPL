
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'DEFN IF LBRAC LET LPAREN NUMBER OBSERVE RBRAC RPAREN SAMPLE VARIABLEstatement : LPAREN DEFN VARIABLE LBRAC arguments RBRAC expression RPAREN statementstatement : expressionarguments : arguments VARIABLE\n                    | VARIABLEexpression : LPAREN IF expression expression expression RPARENexpression : LPAREN LET LBRAC VARIABLE expression RBRAC expression RPARENexpression : LPAREN VARIABLE expression_list RPARENexpression_list : expression_list expression \n                            | expressionexpression : LPAREN SAMPLE expression RPARENexpression : LPAREN OBSERVE expression expression RPARENexpression : NUMBERexpression : VARIABLE'
    
_lr_action_items = {'LPAREN':([0,3,5,7,8,10,11,14,15,16,19,21,22,23,24,25,31,33,34,35,38,39,],[2,-13,-12,13,13,13,13,13,-9,13,13,-7,-8,13,13,-10,-11,13,-5,13,2,-6,]),'NUMBER':([0,3,5,7,8,10,11,14,15,16,19,21,22,23,24,25,31,33,34,35,38,39,],[5,-13,-12,5,5,5,5,5,-9,5,5,-7,-8,5,5,-10,-11,5,-5,5,5,-6,]),'VARIABLE':([0,2,3,5,6,7,8,10,11,13,14,15,16,17,19,20,21,22,23,24,25,27,28,31,32,33,34,35,38,39,],[3,7,-13,-12,12,3,3,3,3,7,3,-9,3,24,3,27,-7,-8,3,3,-10,-4,32,-11,-3,3,-5,3,3,-6,]),'$end':([1,3,4,5,21,25,31,34,39,40,],[0,-13,-2,-12,-7,-10,-11,-5,-6,-1,]),'DEFN':([2,],[6,]),'IF':([2,13,],[8,8,]),'LET':([2,13,],[9,9,]),'SAMPLE':([2,13,],[10,10,]),'OBSERVE':([2,13,],[11,11,]),'RPAREN':([3,5,14,15,18,21,22,25,26,29,31,34,36,37,39,],[-13,-12,21,-9,25,-7,-8,-10,31,34,-11,-5,38,39,-6,]),'RBRAC':([3,5,21,25,27,28,30,31,32,34,39,],[-13,-12,-7,-10,-4,33,35,-11,-3,-5,-6,]),'LBRAC':([9,12,],[17,20,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,38,],[1,40,]),'expression':([0,7,8,10,11,14,16,19,23,24,33,35,38,],[4,15,16,18,19,22,23,26,29,30,36,37,4,]),'expression_list':([7,],[14,]),'arguments':([20,],[28,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> LPAREN DEFN VARIABLE LBRAC arguments RBRAC expression RPAREN statement','statement',9,'p_statement_define','parser.py',8),
  ('statement -> expression','statement',1,'p_statement_expr','parser.py',17),
  ('arguments -> arguments VARIABLE','arguments',2,'p_arguments_expr','parser.py',22),
  ('arguments -> VARIABLE','arguments',1,'p_arguments_expr','parser.py',23),
  ('expression -> LPAREN IF expression expression expression RPAREN','expression',6,'p_expression_if','parser.py',33),
  ('expression -> LPAREN LET LBRAC VARIABLE expression RBRAC expression RPAREN','expression',8,'p_expression_let','parser.py',37),
  ('expression -> LPAREN VARIABLE expression_list RPAREN','expression',4,'p_expression_fcall','parser.py',41),
  ('expression_list -> expression_list expression','expression_list',2,'p_expression_list','parser.py',48),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',49),
  ('expression -> LPAREN SAMPLE expression RPAREN','expression',4,'p_sample','parser.py',59),
  ('expression -> LPAREN OBSERVE expression expression RPAREN','expression',5,'p_observe','parser.py',63),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',67),
  ('expression -> VARIABLE','expression',1,'p_expression_variable','parser.py',71),
]
