Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statement
Rule 1     statement -> LPAREN DEFN VARIABLE LBRAC arguments RBRAC expression RPAREN statement
Rule 2     statement -> expression
Rule 3     arguments -> arguments VARIABLE
Rule 4     arguments -> VARIABLE
Rule 5     expression -> LPAREN IF expression expression expression RPAREN
Rule 6     varexpre -> varexpre VARIABLE expression
Rule 7     varexpre -> VARIABLE expression
Rule 8     expression -> LPAREN LET LBRAC varexpre RBRAC expression RPAREN
Rule 9     expression -> LPAREN VARIABLE expression_list RPAREN
Rule 10    expression_list -> expression_list expression
Rule 11    expression_list -> expression
Rule 12    expression -> LPAREN SAMPLE expression RPAREN
Rule 13    expression -> LPAREN OBSERVE expression expression RPAREN
Rule 14    expression -> NUMBER
Rule 15    expression -> VARIABLE

Terminals, with rules where they appear

DEFN                 : 1
IF                   : 5
LBRAC                : 1 8
LET                  : 8
LPAREN               : 1 5 8 9 12 13
NUMBER               : 14
OBSERVE              : 13
RBRAC                : 1 8
RPAREN               : 1 5 8 9 12 13
SAMPLE               : 12
VARIABLE             : 1 3 4 6 7 9 15
error                : 

Nonterminals, with rules where they appear

arguments            : 1 3
expression           : 1 2 5 5 5 6 7 8 10 11 12 13 13
expression_list      : 9 10
statement            : 1 0
varexpre             : 6 8

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . LPAREN DEFN VARIABLE LBRAC arguments RBRAC expression RPAREN statement
    (2) statement -> . expression
    (5) expression -> . LPAREN IF expression expression expression RPAREN
    (8) expression -> . LPAREN LET LBRAC varexpre RBRAC expression RPAREN
    (9) expression -> . LPAREN VARIABLE expression_list RPAREN
    (12) expression -> . LPAREN SAMPLE expression RPAREN
    (13) expression -> . LPAREN OBSERVE expression expression RPAREN
    (14) expression -> . NUMBER
    (15) expression -> . VARIABLE

    LPAREN          shift and go to state 2
    NUMBER          shift and go to state 5
    VARIABLE        shift and go to state 3

    statement                      shift and go to state 1
    expression                     shift and go to state 4

state 1

    (0) S' -> statement .



state 2

    (1) statement -> LPAREN . DEFN VARIABLE LBRAC arguments RBRAC expression RPAREN statement
    (5) expression -> LPAREN . IF expression expression expression RPAREN
    (8) expression -> LPAREN . LET LBRAC varexpre RBRAC expression RPAREN
    (9) expression -> LPAREN . VARIABLE expression_list RPAREN
    (12) expression -> LPAREN . SAMPLE expression RPAREN
    (13) expression -> LPAREN . OBSERVE expression expression RPAREN

    DEFN            shift and go to state 6
    IF              shift and go to state 8
    LET             shift and go to state 9
    VARIABLE        shift and go to state 7
    SAMPLE          shift and go to state 10
    OBSERVE         shift and go to state 11


state 3

    (15) expression -> VARIABLE .

    $end            reduce using rule 15 (expression -> VARIABLE .)
    RPAREN          reduce using rule 15 (expression -> VARIABLE .)
    LPAREN          reduce using rule 15 (expression -> VARIABLE .)
    NUMBER          reduce using rule 15 (expression -> VARIABLE .)
    VARIABLE        reduce using rule 15 (expression -> VARIABLE .)
    RBRAC           reduce using rule 15 (expression -> VARIABLE .)


state 4

    (2) statement -> expression .

    $end            reduce using rule 2 (statement -> expression .)


state 5

    (14) expression -> NUMBER .

    $end            reduce using rule 14 (expression -> NUMBER .)
    RPAREN          reduce using rule 14 (expression -> NUMBER .)
    LPAREN          reduce using rule 14 (expression -> NUMBER .)
    NUMBER          reduce using rule 14 (expression -> NUMBER .)
    VARIABLE        reduce using rule 14 (expression -> NUMBER .)
    RBRAC           reduce using rule 14 (expression -> NUMBER .)


state 6

    (1) statement -> LPAREN DEFN . VARIABLE LBRAC arguments RBRAC expression RPAREN statement

    VARIABLE        shift and go to state 12


state 7

    (9) expression -> LPAREN VARIABLE . expression_list RPAREN
    (10) expression_list -> . expression_list expression
    (11) expression_list -> . expression
    (5) expression -> . LPAREN IF expression expression expression RPAREN
    (8) expression -> . LPAREN LET LBRAC varexpre RBRAC expression RPAREN
    (9) expression -> . LPAREN VARIABLE expression_list RPAREN
    (12) expression -> . LPAREN SAMPLE expression RPAREN
    (13) expression -> . LPAREN OBSERVE expression expression RPAREN
    (14) expression -> . NUMBER
    (15) expression -> . VARIABLE

    LPAREN          shift and go to state 13
    NUMBER          shift and go to state 5
    VARIABLE        shift and go to state 3

    expression_list                shift and go to state 14
    expression                     shift and go to state 15

state 8

    (5) expression -> LPAREN IF . expression expression expression RPAREN
    (5) expression -> . LPAREN IF expression expression expression RPAREN
    (8) expression -> . LPAREN LET LBRAC varexpre RBRAC expression RPAREN
    (9) expression -> . LPAREN VARIABLE expression_list RPAREN
    (12) expression -> . LPAREN SAMPLE expression RPAREN
    (13) expression -> . LPAREN OBSERVE expression expression RPAREN
    (14) expression -> . NUMBER
    (15) expression -> . VARIABLE

    LPAREN          shift and go to state 13
    NUMBER          shift and go to state 5
    VARIABLE        shift and go to state 3

    expression                     shift and go to state 16

state 9

    (8) expression -> LPAREN LET . LBRAC varexpre RBRAC expression RPAREN

    LBRAC           shift and go to state 17


state 10

    (12) expression -> LPAREN SAMPLE . expression RPAREN
    (5) expression -> . LPAREN IF expression expression expression RPAREN
    (8) expression -> . LPAREN LET LBRAC varexpre RBRAC expression RPAREN
    (9) expression -> . LPAREN VARIABLE expression_list RPAREN
    (12) expression -> . LPAREN SAMPLE expression RPAREN
    (13) expression -> . LPAREN OBSERVE expression expression RPAREN
    (14) expression -> . NUMBER
    (15) expression -> . VARIABLE

    LPAREN          shift and go to state 13
    NUMBER          shift and go to state 5
    VARIABLE        shift and go to state 3

    expression                     shift and go to state 18

state 11

    (13) expression -> LPAREN OBSERVE . expression expression RPAREN
    (5) expression -> . LPAREN IF expression expression expression RPAREN
    (8) expression -> . LPAREN LET LBRAC varexpre RBRAC expression RPAREN
    (9) expression -> . LPAREN VARIABLE expression_list RPAREN
    (12) expression -> . LPAREN SAMPLE expression RPAREN
    (13) expression -> . LPAREN OBSERVE expression expression RPAREN
    (14) expression -> . NUMBER
    (15) expression -> . VARIABLE

    LPAREN          shift and go to state 13
    NUMBER          shift and go to state 5
    VARIABLE        shift and go to state 3

    expression                     shift and go to state 19

state 12

    (1) statement -> LPAREN DEFN VARIABLE . LBRAC arguments RBRAC expression RPAREN statement

    LBRAC           shift and go to state 20


state 13

    (5) expression -> LPAREN . IF expression expression expression RPAREN
    (8) expression -> LPAREN . LET LBRAC varexpre RBRAC expression RPAREN
    (9) expression -> LPAREN . VARIABLE expression_list RPAREN
    (12) expression -> LPAREN . SAMPLE expression RPAREN
    (13) expression -> LPAREN . OBSERVE expression expression RPAREN

    IF              shift and go to state 8
    LET             shift and go to state 9
    VARIABLE        shift and go to state 7
    SAMPLE          shift and go to state 10
    OBSERVE         shift and go to state 11


state 14

    (9) expression -> LPAREN VARIABLE expression_list . RPAREN
    (10) expression_list -> expression_list . expression
    (5) expression -> . LPAREN IF expression expression expression RPAREN
    (8) expression -> . LPAREN LET LBRAC varexpre RBRAC expression RPAREN
    (9) expression -> . LPAREN VARIABLE expression_list RPAREN
    (12) expression -> . LPAREN SAMPLE expression RPAREN
    (13) expression -> . LPAREN OBSERVE expression expression RPAREN
    (14) expression -> . NUMBER
    (15) expression -> . VARIABLE

    RPAREN          shift and go to state 21
    LPAREN          shift and go to state 13
    NUMBER          shift and go to state 5
    VARIABLE        shift and go to state 3

    expression                     shift and go to state 22

state 15

    (11) expression_list -> expression .

    RPAREN          reduce using rule 11 (expression_list -> expression .)
    LPAREN          reduce using rule 11 (expression_list -> expression .)
    NUMBER          reduce using rule 11 (expression_list -> expression .)
    VARIABLE        reduce using rule 11 (expression_list -> expression .)


state 16

    (5) expression -> LPAREN IF expression . expression expression RPAREN
    (5) expression -> . LPAREN IF expression expression expression RPAREN
    (8) expression -> . LPAREN LET LBRAC varexpre RBRAC expression RPAREN
    (9) expression -> . LPAREN VARIABLE expression_list RPAREN
    (12) expression -> . LPAREN SAMPLE expression RPAREN
    (13) expression -> . LPAREN OBSERVE expression expression RPAREN
    (14) expression -> . NUMBER
    (15) expression -> . VARIABLE

    LPAREN          shift and go to state 13
    NUMBER          shift and go to state 5
    VARIABLE        shift and go to state 3

    expression                     shift and go to state 23

state 17

    (8) expression -> LPAREN LET LBRAC . varexpre RBRAC expression RPAREN
    (6) varexpre -> . varexpre VARIABLE expression
    (7) varexpre -> . VARIABLE expression

    VARIABLE        shift and go to state 25

    varexpre                       shift and go to state 24

state 18

    (12) expression -> LPAREN SAMPLE expression . RPAREN

    RPAREN          shift and go to state 26


state 19

    (13) expression -> LPAREN OBSERVE expression . expression RPAREN
    (5) expression -> . LPAREN IF expression expression expression RPAREN
    (8) expression -> . LPAREN LET LBRAC varexpre RBRAC expression RPAREN
    (9) expression -> . LPAREN VARIABLE expression_list RPAREN
    (12) expression -> . LPAREN SAMPLE expression RPAREN
    (13) expression -> . LPAREN OBSERVE expression expression RPAREN
    (14) expression -> . NUMBER
    (15) expression -> . VARIABLE

    LPAREN          shift and go to state 13
    NUMBER          shift and go to state 5
    VARIABLE        shift and go to state 3

    expression                     shift and go to state 27

state 20

    (1) statement -> LPAREN DEFN VARIABLE LBRAC . arguments RBRAC expression RPAREN statement
    (3) arguments -> . arguments VARIABLE
    (4) arguments -> . VARIABLE

    VARIABLE        shift and go to state 28

    arguments                      shift and go to state 29

state 21

    (9) expression -> LPAREN VARIABLE expression_list RPAREN .

    $end            reduce using rule 9 (expression -> LPAREN VARIABLE expression_list RPAREN .)
    RPAREN          reduce using rule 9 (expression -> LPAREN VARIABLE expression_list RPAREN .)
    LPAREN          reduce using rule 9 (expression -> LPAREN VARIABLE expression_list RPAREN .)
    NUMBER          reduce using rule 9 (expression -> LPAREN VARIABLE expression_list RPAREN .)
    VARIABLE        reduce using rule 9 (expression -> LPAREN VARIABLE expression_list RPAREN .)
    RBRAC           reduce using rule 9 (expression -> LPAREN VARIABLE expression_list RPAREN .)


state 22

    (10) expression_list -> expression_list expression .

    RPAREN          reduce using rule 10 (expression_list -> expression_list expression .)
    LPAREN          reduce using rule 10 (expression_list -> expression_list expression .)
    NUMBER          reduce using rule 10 (expression_list -> expression_list expression .)
    VARIABLE        reduce using rule 10 (expression_list -> expression_list expression .)


state 23

    (5) expression -> LPAREN IF expression expression . expression RPAREN
    (5) expression -> . LPAREN IF expression expression expression RPAREN
    (8) expression -> . LPAREN LET LBRAC varexpre RBRAC expression RPAREN
    (9) expression -> . LPAREN VARIABLE expression_list RPAREN
    (12) expression -> . LPAREN SAMPLE expression RPAREN
    (13) expression -> . LPAREN OBSERVE expression expression RPAREN
    (14) expression -> . NUMBER
    (15) expression -> . VARIABLE

    LPAREN          shift and go to state 13
    NUMBER          shift and go to state 5
    VARIABLE        shift and go to state 3

    expression                     shift and go to state 30

state 24

    (8) expression -> LPAREN LET LBRAC varexpre . RBRAC expression RPAREN
    (6) varexpre -> varexpre . VARIABLE expression

    RBRAC           shift and go to state 31
    VARIABLE        shift and go to state 32


state 25

    (7) varexpre -> VARIABLE . expression
    (5) expression -> . LPAREN IF expression expression expression RPAREN
    (8) expression -> . LPAREN LET LBRAC varexpre RBRAC expression RPAREN
    (9) expression -> . LPAREN VARIABLE expression_list RPAREN
    (12) expression -> . LPAREN SAMPLE expression RPAREN
    (13) expression -> . LPAREN OBSERVE expression expression RPAREN
    (14) expression -> . NUMBER
    (15) expression -> . VARIABLE

    LPAREN          shift and go to state 13
    NUMBER          shift and go to state 5
    VARIABLE        shift and go to state 3

    expression                     shift and go to state 33

state 26

    (12) expression -> LPAREN SAMPLE expression RPAREN .

    $end            reduce using rule 12 (expression -> LPAREN SAMPLE expression RPAREN .)
    RPAREN          reduce using rule 12 (expression -> LPAREN SAMPLE expression RPAREN .)
    LPAREN          reduce using rule 12 (expression -> LPAREN SAMPLE expression RPAREN .)
    NUMBER          reduce using rule 12 (expression -> LPAREN SAMPLE expression RPAREN .)
    VARIABLE        reduce using rule 12 (expression -> LPAREN SAMPLE expression RPAREN .)
    RBRAC           reduce using rule 12 (expression -> LPAREN SAMPLE expression RPAREN .)


state 27

    (13) expression -> LPAREN OBSERVE expression expression . RPAREN

    RPAREN          shift and go to state 34


state 28

    (4) arguments -> VARIABLE .

    RBRAC           reduce using rule 4 (arguments -> VARIABLE .)
    VARIABLE        reduce using rule 4 (arguments -> VARIABLE .)


state 29

    (1) statement -> LPAREN DEFN VARIABLE LBRAC arguments . RBRAC expression RPAREN statement
    (3) arguments -> arguments . VARIABLE

    RBRAC           shift and go to state 36
    VARIABLE        shift and go to state 35


state 30

    (5) expression -> LPAREN IF expression expression expression . RPAREN

    RPAREN          shift and go to state 37


state 31

    (8) expression -> LPAREN LET LBRAC varexpre RBRAC . expression RPAREN
    (5) expression -> . LPAREN IF expression expression expression RPAREN
    (8) expression -> . LPAREN LET LBRAC varexpre RBRAC expression RPAREN
    (9) expression -> . LPAREN VARIABLE expression_list RPAREN
    (12) expression -> . LPAREN SAMPLE expression RPAREN
    (13) expression -> . LPAREN OBSERVE expression expression RPAREN
    (14) expression -> . NUMBER
    (15) expression -> . VARIABLE

    LPAREN          shift and go to state 13
    NUMBER          shift and go to state 5
    VARIABLE        shift and go to state 3

    expression                     shift and go to state 38

state 32

    (6) varexpre -> varexpre VARIABLE . expression
    (5) expression -> . LPAREN IF expression expression expression RPAREN
    (8) expression -> . LPAREN LET LBRAC varexpre RBRAC expression RPAREN
    (9) expression -> . LPAREN VARIABLE expression_list RPAREN
    (12) expression -> . LPAREN SAMPLE expression RPAREN
    (13) expression -> . LPAREN OBSERVE expression expression RPAREN
    (14) expression -> . NUMBER
    (15) expression -> . VARIABLE

    LPAREN          shift and go to state 13
    NUMBER          shift and go to state 5
    VARIABLE        shift and go to state 3

    expression                     shift and go to state 39

state 33

    (7) varexpre -> VARIABLE expression .

    RBRAC           reduce using rule 7 (varexpre -> VARIABLE expression .)
    VARIABLE        reduce using rule 7 (varexpre -> VARIABLE expression .)


state 34

    (13) expression -> LPAREN OBSERVE expression expression RPAREN .

    $end            reduce using rule 13 (expression -> LPAREN OBSERVE expression expression RPAREN .)
    RPAREN          reduce using rule 13 (expression -> LPAREN OBSERVE expression expression RPAREN .)
    LPAREN          reduce using rule 13 (expression -> LPAREN OBSERVE expression expression RPAREN .)
    NUMBER          reduce using rule 13 (expression -> LPAREN OBSERVE expression expression RPAREN .)
    VARIABLE        reduce using rule 13 (expression -> LPAREN OBSERVE expression expression RPAREN .)
    RBRAC           reduce using rule 13 (expression -> LPAREN OBSERVE expression expression RPAREN .)


state 35

    (3) arguments -> arguments VARIABLE .

    RBRAC           reduce using rule 3 (arguments -> arguments VARIABLE .)
    VARIABLE        reduce using rule 3 (arguments -> arguments VARIABLE .)


state 36

    (1) statement -> LPAREN DEFN VARIABLE LBRAC arguments RBRAC . expression RPAREN statement
    (5) expression -> . LPAREN IF expression expression expression RPAREN
    (8) expression -> . LPAREN LET LBRAC varexpre RBRAC expression RPAREN
    (9) expression -> . LPAREN VARIABLE expression_list RPAREN
    (12) expression -> . LPAREN SAMPLE expression RPAREN
    (13) expression -> . LPAREN OBSERVE expression expression RPAREN
    (14) expression -> . NUMBER
    (15) expression -> . VARIABLE

    LPAREN          shift and go to state 13
    NUMBER          shift and go to state 5
    VARIABLE        shift and go to state 3

    expression                     shift and go to state 40

state 37

    (5) expression -> LPAREN IF expression expression expression RPAREN .

    $end            reduce using rule 5 (expression -> LPAREN IF expression expression expression RPAREN .)
    RPAREN          reduce using rule 5 (expression -> LPAREN IF expression expression expression RPAREN .)
    LPAREN          reduce using rule 5 (expression -> LPAREN IF expression expression expression RPAREN .)
    NUMBER          reduce using rule 5 (expression -> LPAREN IF expression expression expression RPAREN .)
    VARIABLE        reduce using rule 5 (expression -> LPAREN IF expression expression expression RPAREN .)
    RBRAC           reduce using rule 5 (expression -> LPAREN IF expression expression expression RPAREN .)


state 38

    (8) expression -> LPAREN LET LBRAC varexpre RBRAC expression . RPAREN

    RPAREN          shift and go to state 41


state 39

    (6) varexpre -> varexpre VARIABLE expression .

    RBRAC           reduce using rule 6 (varexpre -> varexpre VARIABLE expression .)
    VARIABLE        reduce using rule 6 (varexpre -> varexpre VARIABLE expression .)


state 40

    (1) statement -> LPAREN DEFN VARIABLE LBRAC arguments RBRAC expression . RPAREN statement

    RPAREN          shift and go to state 42


state 41

    (8) expression -> LPAREN LET LBRAC varexpre RBRAC expression RPAREN .

    $end            reduce using rule 8 (expression -> LPAREN LET LBRAC varexpre RBRAC expression RPAREN .)
    RPAREN          reduce using rule 8 (expression -> LPAREN LET LBRAC varexpre RBRAC expression RPAREN .)
    LPAREN          reduce using rule 8 (expression -> LPAREN LET LBRAC varexpre RBRAC expression RPAREN .)
    NUMBER          reduce using rule 8 (expression -> LPAREN LET LBRAC varexpre RBRAC expression RPAREN .)
    VARIABLE        reduce using rule 8 (expression -> LPAREN LET LBRAC varexpre RBRAC expression RPAREN .)
    RBRAC           reduce using rule 8 (expression -> LPAREN LET LBRAC varexpre RBRAC expression RPAREN .)


state 42

    (1) statement -> LPAREN DEFN VARIABLE LBRAC arguments RBRAC expression RPAREN . statement
    (1) statement -> . LPAREN DEFN VARIABLE LBRAC arguments RBRAC expression RPAREN statement
    (2) statement -> . expression
    (5) expression -> . LPAREN IF expression expression expression RPAREN
    (8) expression -> . LPAREN LET LBRAC varexpre RBRAC expression RPAREN
    (9) expression -> . LPAREN VARIABLE expression_list RPAREN
    (12) expression -> . LPAREN SAMPLE expression RPAREN
    (13) expression -> . LPAREN OBSERVE expression expression RPAREN
    (14) expression -> . NUMBER
    (15) expression -> . VARIABLE

    LPAREN          shift and go to state 2
    NUMBER          shift and go to state 5
    VARIABLE        shift and go to state 3

    expression                     shift and go to state 4
    statement                      shift and go to state 43

state 43

    (1) statement -> LPAREN DEFN VARIABLE LBRAC arguments RBRAC expression RPAREN statement .

    $end            reduce using rule 1 (statement -> LPAREN DEFN VARIABLE LBRAC arguments RBRAC expression RPAREN statement .)

